  {/* Crear nueva área */}
      <div className="mb-4">
        <input
          type="text"
          placeholder="Nueva área"
          value={newArea}
          onChange={(e) => setNewArea(e.target.value)}
        />
        <button onClick={handleAddArea}>Agregar área</button>
      </div>
      ===============================================================================================
      "use client";
import { useState, useEffect } from "react";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import interactionPlugin from "@fullcalendar/interaction";
import { saveAs } from "file-saver";
import { Usuario } from "../models/Usuario";
import { DateSelectArg } from '@fullcalendar/core';

import "../styles/globals.css"
 
 
const AREAS =
[
  "Administración de Usuarios",
  "Aplicaciones no Core",
  "Bases de Datos",
  "BI & Reportes",
  "Centro de Computo",
  "CRM",
  "Fábrica BOTS",
  "Fábrica RPA",
  "Incidencias Masivas",
  "IVR",
  "Plataforma de Grabaciones",
  "Plataforma de Servidores",
  "Redes Bogotá",
  "Redes Medellín",
  "Seguridad de la Información",
  "Soporte de Aplicaciones",
  "Telefonia Medellín-Bogota"
];
 
 
interface Event {
  id: string;
  title: string;
  start: string;
  end: string;
  allDay: boolean;
  color: string;
  area: string;
  contact: string;
}
 
export default function CalendarPage()
{
  const [events, setEvents] = useState<Event[]>([]);
  const [selectedArea, setSelectedArea] = useState("");
  const [users, setUsers] = useState<Usuario[]>([]);
  const [selectedUser, setSelectedUser] = useState("");
  const [selectedContact, setSelectedContact] = useState("");
  const [newUserName, setNewUserName] = useState("");
  const [newUserContact, setNewUserContact] = useState("");
  const [newUserArea, setNewUserArea] = useState("");
 
  useEffect(() =>
  {
    const savedEvents = localStorage.getItem("events");
    if (savedEvents) {
      setEvents(JSON.parse(savedEvents));
    }
 
    const savedUsers = localStorage.getItem("users");
    if (savedUsers) {
      setUsers(JSON.parse(savedUsers));
    }
  }, []);
 
  useEffect(() =>
  {
    localStorage.setItem("events", JSON.stringify(events));
    localStorage.setItem("users", JSON.stringify(users));
  }, [events, users]);
 
  const getRandomColor = () => {
    const colors = ["#8b0000", "#ff4500", "#ffd700", "#006400", "#4682b4", "#4169e1", "#4b0082"];
    return colors[Math.floor(Math.random() * colors.length)];
  };
 
  const handleDateSelect = (selectInfo: DateSelectArg) => {
    if (!selectedUser || !selectedArea) {
      alert("Seleccione un usuario antes de agregar disponibilidad.");
      return;
    }
    const newEvent: Event = {
      id: Date.now().toString(),
      title: `${selectedUser} - ${selectedContact}`,
      start: selectInfo.startStr,
      end: selectInfo.endStr || selectInfo.startStr,
      allDay: true,
      color: getRandomColor(),
      area: selectedArea,
      contact: selectedContact,
    };
    setEvents([...events, newEvent]);
    alert("Disponibilidad agregada!");
  };
 
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const handleEventClick = (info: any) => {
    alert(`Usuario: ${info.event.title}\nContacto: ${info.event.extendedProps.contact}`);
  };
 
  const exportToCSV = () => {
    const csvContent = "Área,Nombre,Contacto,Inicio,Fin\n" +
      events.map(e => `${e.area},${e.title},${e.contact},${e.start},${e.end}`).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    saveAs(blob, "disponibilidades.csv");
  };
 
  const addUser = () => {
    if (!newUserName || !newUserContact || !newUserArea) {
      alert("Ingrese nombre, teléfono y seleccione un área.");
      return;
    }
    setUsers([...users, new Usuario(newUserName, newUserContact, newUserArea)]);
    setNewUserName("");
    setNewUserContact("");
    setNewUserArea("");
    alert("Usuario agregado!");
  };
 
  const deleteAllEvents = () => {
    setEvents([]);
    alert("Todos los eventos han sido eliminados.");
  };
 
  return (
    <div className="container mx-auto p-10">
      <h1 className="place-content-center h-30 bg-linear-to-t from-sky-500 to-indigo-300 text-2xl font-bold mb-3 text-center rounded">Calendario de Disponibilidad</h1>
 
      <div className="mb-4">
        <h3 className="mb-2 text-lw font-semibold">Agregar Usuario</h3>
        <select className="boxUser" value={newUserArea} onChange={(e) => setNewUserArea(e.target.value)}>
          <option value="">Seleccione un área</option>
          {AREAS.map((area) => (
            <option key={area} value={area}>{area}</option>
          ))}
        </select>
        <input className="boxUser border p-4 w-full mt-2" placeholder="Nombre" value={newUserName} onChange={(e) => setNewUserName(e.target.value)} />
        <input className="boxUser border p-4 w-full mt-2" placeholder="Teléfono" value=
       
        {newUserContact} onChange={(e) => setNewUserContact(e.target.value)} />
       
        <button className="bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded mt-2" onClick={addUser}>Agregar Usuario</button>
 
        <button className="ml-2 bg-yellow-500 hover:bg-yellow-400 text-white font-bold py-2 px-4 border-b-4 border-yellow-700 hover:border-yellow-500 rounded mt-2" onClick={addUser}>Actualizar Usuario</button>
 
        <button className="bg-red-500 hover:bg-red-400 text-white font-bold py-2 px-4 border-b-4 border-red-700 hover:border-red-500 rounded mt-2 ml-2" onClick={addUser}>Eliminar Usuario</button>
 
      </div>
      <select className="boxUser" value={selectedArea} onChange={(e) => setSelectedArea(e.target.value)}>
        <option value="">Seleccione un área</option>
        {AREAS.map((area) => (
          <option key={area} value={area}>{area}</option>
        ))}
      </select>
     
      {selectedArea && (
        <select className="boxUser mt-2" value={selectedUser} onChange={(e) => {
          const selected = users.find(user => user.name === e.target.value);
          setSelectedUser(selected?.name || "");
          setSelectedContact(selected?.contact || "");
        }}>
          <option value="">Seleccione un usuario</option>
          {users.filter(user => user.area === selectedArea).map(user => (
            <option key={user.name} value={user.name}>{user.name} - {user.contact}</option>
          ))}
        </select>
      )}
     
      <button className="bg-green-500 hover:bg-green-400 text-white font-bold py-2 px-4 border-b-4 border-green-700 hover:border-green-500 rounded mt-2" onClick={exportToCSV}>Exportar a CSV</button>
     
      <button className="bg-red-500 hover:bg-red-400 text-white font-bold py-2 px-4 border-b-4 border-red-700 hover:border-red-500 rounded mt-2 ml-2" onClick={deleteAllEvents}>Eliminar todos los registros</button>
     
      {selectedArea && (
        <div className="mt-10 bg-white text-black p-4 rounded-lg shadow-md">
          <FullCalendar
            plugins={[dayGridPlugin, interactionPlugin]}
            initialView="dayGridMonth"
            selectable={true}
            select={handleDateSelect}
            events={events.filter(e => e.area === selectedArea)}
            eventClick={handleEventClick}
          />
        </div>
      )}
    </div>
  );
}


===========================================================================
        <label className="mr-2">Selecciona el área:</label>
        <select value={selectedArea} onChange={(e) => setSelectedArea(e.target.value)}>
          {areas.map((area) => (
            <option key={area} value={area}>
              {area}
            </option>
          ))}
        </select>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
         * Permite seleccionar solo días donde aún no haya eventos.
         */
        selectAllow={(selectInfo) => {
          const startDate = new Date(selectInfo.startStr);
          const endDate = new Date(selectInfo.endStr);
          const events = areaEvents[selectedArea] || [];
        
          // Recorre cada día del rango
          for (let d = new Date(startDate); d < endDate; d.setDate(d.getDate() + 1)) {
            const dayStr = d.toISOString().slice(0, 10);
        
            // Verifica si hay un evento ese día
            const existsEvent = events.some(event => {
              const eventStart = new Date(event.start as string).toISOString().slice(0, 10);
              return eventStart === dayStr;
            });
        
            if (existsEvent) {
              return false; // Si al menos un día ya está ocupado, no permite seleccionar
            }
          }
        
          return true; // Si todos los días están libres, permite seleccionar
        }}
        
